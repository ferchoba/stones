/*
 * Stones
 * Copyright (c) 2013 Carlos Le√≥n
 *
 * Licensed under the MIT license (http://mit-license.org/)
 */

window.stones = {};

(function ($, angular, stones) {
  // Stones module definition and configuration
  'use strict';

  // Stones Global Constants
  var STONES_CACHE = null;

  stones = angular.module('stones', []);
  stones.config([
    '$locationProvider',
    function ($locationProvider) {
      $locationProvider.hashPrefix('!');
    }]);
  stones.run([
    '$rootScope',
    'stones.translator_opts',
    '$cacheFactory',
    '$window',
    function ($rootScope, translator_opts, $cacheFactory, $window) {
      $rootScope.$_ = translator_opts.translate;
      STONES_CACHE = $cacheFactory(STONES_CACHE, 500);
      $rootScope.$$state$$ = {ready: false};

      $rootScope.go_back = function () {
        $window.history.back();
      };
      $rootScope.reject = function () {
        $rootScope.go_back();
      }
    }]);

  /*
   * Handles unsuccessful responses from server.
   */
  stones.factory('stones.server_error_handler', [
    '$exceptionHandler',
    function ($exceptionHandler) {
      return function (data) {
        console.log(data.status);
      };
    }]);

  /*
   * Returns a function to retrieve a list of entities.
   */
  stones.factory('stones.get_entities', [
    '$http',
    'stones.server_error_handler',
    '$rootScope',
    '$q',
    '$timeout',
    function ($http, server_error_handler, scope, $q, $timeout) {
      return function (url, cache) {
        return function (params) {
          var deferred = $q.defer(),
            http = null,
            http_opts = {
              url: url,
              method: 'GET',
              params: params
            };

          if (cache) {
            if (typeof(cache) === 'boolean') {
              http_opts.cache = STONES_CACHE;
            } else {
              http_opts.cache = cache;
            }
          }

          scope.$$state$$.ready = false;

          $timeout(function () {
            http = $http(http_opts).then(function (data) {
              scope.$$state$$.ready = true;
              deferred.resolve(data.data);
            }, function (data) {
              server_error_handler(data);
              scope.$$state$$.ready = true;
              deferred.reject([]);
            });
          }, 500);

          return deferred.promise;
        };
      };
    }]);

  /*
   * Returns a function to retrieve one entity by key or id.
   */
  stones.factory('stones.get_entity', [
    '$http',
    'stones.server_error_handler',
    '$cacheFactory',
    '$rootScope',
    function ($http, server_error_handler, $cacheFactory, scope) {
      return function (url) {
        return function (key, cache) {
          var http_opts = {
            url: url + key,
            method: 'GET'
          };

          if (cache) {
            if (typeof(cache) === 'boolean') {
              http_opts.cache = STONES_CACHE;
            } else {
              http_opts.cache = cache;
            }
          }

          scope.$$state$$.ready = false;
          return $http(http_opts).then(function (data) {
            return data.data;
          }, function (data) {
            server_error_handler(data);
            scope.$$state$$.ready = true;
            return {};
          });
        };
      };
    }]);

  /*
   * Returns a function to delete/erase one entity by key or id.
   */
  stones.factory('stones.delete_entity', [
    '$http',
    'stones.server_error_handler',
    '$rootScope',
    function ($http, server_error_handler, scope) {
      return function (url) {
        return function (entity) {
          var http_opts = {
            url: url + entity.$$key$$,
            method: 'DELETE'
          };

          scope.$$state$$.ready = false;
          return $http(http_opts).then(function (data) {
            return true;
          }, function (data) {
            server_error_handler(data);
            scope.$$state$$.ready = true;
            return false;
          });
        };
      };
    }]);

  /*
   * Returns a function to save/modify one entity by key or id.
   */
  stones.factory('stones.save_entity', [
    '$http',
    'stones.server_error_handler',
    '$rootScope',
    function ($http, server_error_handler, scope) {
      return function (url) {
        return function (entity) {
          var own_entity = angular.copy(entity),
            http_opts = {
              url: url,
              method: 'POST',
              data: own_entity
            };

          if (own_entity.$$key$$ || own_entity.$$id$$) {
            http_opts.method = 'PUT';
            http_opts.url += (own_entity.$$key$$ || own_enity.$$id$$);
          }

          scope.$$state$$.ready = false;
          return $http(http_opts).then(function (data) {
            return data.data;
          }, function (data) {
            server_error_handler(data);
            scope.$$state$$.ready = true;
            return null;
          });
        };
      };
    }]);

  /*
   * Return a valid date formatted to work with Stones Server.
   * Uses sugar.js to perform date format.
   */
  stones.factory('stones.get_valid_date_string', [
    function () {
      return function (date) {
        return date.format('{yyyy}-{MM}-{dd}T{HH}:{mm}:{ss}Z');
      };
    }]);

  /*
   * Directive to manage dates.
   * Uses HTML5 date format as Google Chrome defines it.
   */
  stones.directive('stDate', [
    function () {
      return {
        require: '^?ngModel',
        link: function(scope, elm, attrs, ctrl) {
          if (!ctrl) { return; }
          function parse_validator (value) {
            // this validator uses sugarjs to create dates
            // see http://sugarjs.com/dates
            var t = Date.create(value),
              format = '{yyyy}-{MM}-{dd}T{HH}:{mm}:{ss}Z';
            if (t.toString === 'Invalid Date') {
              ctrl.$setValidity('stDateError', false);
              ctrl.$setViewValue(null);
            } else {
              return t.utc(true).format(format);
            }
          }

          function formatter (value) {
            if (!value) { return; }
            var t = Date.create(value);
            if (attrs.stDate) {
              return t.format(attrs.stDate);
            } else {
              return t.format('{yyyy}-{MM}-{dd}');
            }
          }

          ctrl.$parsers.push(parse_validator);
          ctrl.$formatters.push(formatter);
        }
      };
    }]);

  /*
   * Directive to manage numbers.
   * Deals with Zero problem.
   */
  stones.directive('stNumber', [
    function () {
      return {
        require: '^?ngModel',
        link: function (scope, elm, attrs, ctrl) {
          if (!ctrl) { return; }
          function validator (value) {
            if (!angular.isNumber(value)) {
              var transformed = Number(value);
              if (transformed === 0 || Boolean(transformed)) {
                return transformed;
              } else {
                ctrl.$setValidity('stNumberError', false);
                ctrl.$setViewValue(null);
              }
            }
            return value;
          }

          ctrl.$parsers.push(validator);
          ctrl.$formatters.push(validator);
        }
      };
    }]);

  /*
   * Directive to add typeahead search and selection.
   * Uses Bootstrap
   */
  stones.directive('stTypeahead', [
    '$parse',
    '$compile',
    function ($parse, $compile) {
      var tpl = '<ul class="typeahead dropdown-menu st-typeahead"><li ng-repeat="$item in $matched_items" ng-click="$select_item($item)" ng-class="$set_item_class($item)"><a href="">{{$item.label}}</a></li></ul>',
        typeahead_controller;
      typeahead_controller = [
        '$scope',
        '$attrs',
        function ($scope, $attrs) {
          var label_attr = $attrs.stLabel,
            value_attr = $attrs.stValue,
            deny_new = Boolean($attrs.stDenyNew),
            select_fn = $parse($attrs.stSelect),
            sort_fn = $parse($attrs.stSort),
            ctrl = this;

          ctrl.model_ctrl = null;
          ctrl.elm = null;
          ctrl.menu = null;
          ctrl.current_item = null;
          ctrl.focused = false;
          ctrl.mousedover = false;
          ctrl.index = null;
          ctrl.source = [];
          ctrl.show_counter = 0;

          $scope.$matched_items = [];
          $scope.$watch('current_item', function (value, old) {
            if (value && value !== old) {
              ctrl.model_ctrl.$setViewValue(value.label);
            }
          });

          ctrl.set_index = function (index) {
            ctrl.index = index;
          };

          ctrl.set_menu = function (menu) {
            ctrl.menu = angular.element(menu);
            ctrl.menu.bind('mouseenter', ctrl.mouseenter);
            ctrl.menu.bind('mouseleave', ctrl.mouseleave);
          };

          ctrl.set_element = function (elm) {
            ctrl.elm = angular.element(elm);
          };

          ctrl.set_model_ctrl = function (model_ctrl) {
            ctrl.model_ctrl = model_ctrl;
          }

          ctrl.set_source = function (value) {
            var items = [];
            function get_label(item) {
              if (label_attr) {
                return item[label_attr];
              } else {
                return item;
              }
            }

            function get_value(item) {
              if (value_attr) {
                return item[value_attr];
              } else {
                return item;
              }
            }

            if (angular.isArray(value)) {
              value.each(function (n) {
                items.push({
                  label: get_label(n),
                  value: get_value(n)
                });
              });
            } else if (angular.isObject(value)) {
              for (var key in value) {
                items.push({
                  label: key,
                  value: get_value(value[key])
                });
              }
            }
            ctrl.source = items;
          };

          ctrl.match_items = function (value, digest) {
            if (ctrl.show_counter === 0) { return; }
            var sort = sort_fn($scope);
            if (!value || value === '') {
              $scope.$matched_items = ctrl.source;
            } else {
              $scope.$matched_items = ctrl.source.filter(function (n) {
                return n.label.toLowerCase().has(value.toLowerCase());
              });
              $scope.$matched_items = $scope.$matched_items || [];
              if ($scope.$matched_items.length > 0) {
                $scope.$matched_items.each(function (n) {
                  if (n.label === value) ctrl.selected = true;
                });
              }
            }
            if (sort) {
              $scope.$matched_items = $scope.$matched_items.sortBy(sort);
            } else if (sort === false) {
              // no sort
            } else {
              $scope.$matched_items = $scope.$matched_items.sortBy('label');
            }
            ctrl.current_item = $scope.$matched_items[0];
            if (digest) {
              try { $scope.$apply(); } catch (e) {}
            }
            ctrl.show();
          };

          ctrl.select_item = function (item) {
            var fn = select_fn($scope);
            function select(local_item) {
              ctrl.model_ctrl.$setViewValue(local_item.label);
              ctrl.elm.val(local_item.label);
              if (fn && angular.isFunction(fn)) {
                fn(local_item.value, ctrl.index);
              }
            }
            if (item) {
              select(item);
            } else {
              item = ctrl.current_item;
              if (item) {
                select(item);
              } else {
                if (deny_new) {
                  ctrl.model_ctrl.$setViewValue('');
                  ctrl.elm.val('');
                  if (fn && angular.isFunction(fn)) {
                    fn();
                  }
                }
              }
            }
            ctrl.hide();
            ctrl.show_counter = 0;
          };

          ctrl.keydown = function (e) {
            switch (e.keyCode) {
              case 9:
                ctrl.select_item();
                break;
              case 13:
                e.preventDefault();
                ctrl.select_item();
                break;
              case 38:
                ctrl.next();
                break;
              case 40:
                ctrl.prev();
                break;
              case 27:
                ctrl.hide();
                break;
              default:
                ctrl.show_counter++;
            }
          };

          ctrl.prev = function () {
            var index = $scope.$matched_items.indexOf(ctrl.current_item);
            if (index === $scope.$matched_items.length - 1) {
              index -= 1;
            }
            ctrl.current_item = $scope.$matched_items[index + 1];
            try { $scope.$apply(); } catch (e) {}
          };

          ctrl.next = function () {
            var index = $scope.$matched_items.indexOf(ctrl.current_item);
            if (index === 0) {
              index += 1;
            }
            ctrl.current_item = $scope.$matched_items[index - 1];
            try { $scope.$apply(); } catch (e) {}
          };

          ctrl.focus = function (e) {
            var empty = e.currentTarget.value === '';
            if (empty) { ctrl.show_counter++; }
            ctrl.focused = true;
            ctrl.match_items(e.currentTarget.value, true);
          };

          ctrl.blur = function (e) {
            ctrl.focused = false;
            if (!ctrl.mousedover) { ctrl.hide(); }
          };

          ctrl.show = function () {
            if ($scope.$matched_items.length > 0) {
              var offset = ctrl.elm.offset();
              offset.top += ctrl.elm[0].offsetHeight + 2;
              ctrl.menu.css('top', offset.top);
              ctrl.menu.css('left', offset.left);
              ctrl.menu.show();
            } else {
              ctrl.hide();
            }
          };

          ctrl.hide = function () {
            ctrl.menu.hide();
          };

          ctrl.mouseenter = function (e) {
            ctrl.mousedover = true;
            ctrl.menu.find('li').removeClass('active');
          };

          ctrl.mouseleave = function (e) {
            ctrl.mousedover = false;
            var index = $scope.$matched_items.indexOf(ctrl.current_item);
            if (index !== -1) {
              ctrl.menu.find('li').eq(index).addClass('active');
            }
          };
        }];

      function linker(scope, elm, attrs, ctrl) {
        var typeahead_ctrl = ctrl[0],
          model_ctrl = ctrl[1],
          menu = null;
        if (!typeahead_ctrl || !model_ctrl) { return; }
        typeahead_ctrl.set_model_ctrl(model_ctrl);
        typeahead_ctrl.set_element(elm);
        if (scope.$index !== undefined) {
          typeahead_ctrl.set_index(scope.$index);
        }
        scope.$watch(attrs.stTypeahead, function (value) {
          typeahead_ctrl.set_source(value);
        });
        scope.$watch(attrs.ngModel, function (value, old) {
          if (value === old) { return; }
          typeahead_ctrl.match_items(value, false);
        });
        menu = $compile(tpl)(scope);
        typeahead_ctrl.set_menu(menu);
        angular.element('body').append(menu);
        scope.$on('$destroy', function (e) {
          menu.remove();
        });
        elm.bind('keydown', typeahead_ctrl.keydown);
        elm.bind('focus', typeahead_ctrl.focus);
        elm.bind('blur', typeahead_ctrl.blur);
        scope.$select_item = typeahead_ctrl.select_item;
        scope.$set_item_class = function (item) {
          var rv = '';
          if (item === typeahead_ctrl.current_item) {
            rv += 'active ';
          }
          return rv.trim();
        };
      }

      return {
        restrict: 'A',
        require: ['stTypeahead', '^?ngModel'],
        scope: true,
        controller: typeahead_controller,
        link: linker,
      };
    }]);

  /*
   * Adds range input type to ng capabilities.
   */
  stones.directive('input', [
    function () {
      return {
        restrict: 'E',
        require: '?ngModel',
        link: function (scope, elm, attrs, ctrl) {
          if (!ctrl || attrs.type !== 'range') { return; }
          function listener() {
            var value = elm.val().toNumber();
            if (ctrl.$viewValue !== value) {
              scope.$apply(function () {
                ctrl.$setViewValue(value);
              });
            }
          }
          elm.bind('change', listener);
        }
      }
    }]);

  /*
   * Adds file input type to ng capabilities.
   */
  stones.directive('input', [
    // type file support to input
    function () {
      return {
        restrict: 'E',
        require: '?ngModel',
        link: function (scope, elm, attrs, ctrl) {
          if (!ctrl || attrs.type !== 'file') { return; }
          var mimetype = attrs.mimetype,
            listener = function () {
              var file = elm[0].files[0],
                reader = new FileReader();
              reader.onload = function (f) {
                var result = f.target.result;
                scope.$apply(function () {
                  ctrl.$setViewValue(result);
                });
              };
              if (mimetype === undefined || file.type.has(mimetype)) {
                reader.readAsDataURL(file);
              } else {
                scope.$apply(function () {
                  ctrl.$setViewValue('');
                });
                elm.val('');
              }
            };
          elm.bind('change', listener);
          ctrl.$render = function () {};
        }
      };
    }]);


  stones.directive('stFilter', [
    '$compile',
    '$parse',
    function ($compile, $parse) {
      return {
        link: function (scope, elm, attrs) {
          var control_tpl = scope.$filter.control_tpl,
            control;
          if (control_tpl === 'textinput' || control_tpl === undefined) {
            control_tpl = '<input style="margin-bottom:0;" type="text" ng-class="$filter.css_class" ng-model="$search_obj.{1}">'.assign(scope.$filter.search_obj_attr);
          }
          if (control_tpl) {
            control = $compile(control_tpl)(scope);
            elm.replaceWith(control);
          }
        }
      }
    }]);
  stones.directive('stEntitiesTable', [
    '$compile',
    '$parse',
    '$location',
    '$http',
    '$routeParams',
    '$timeout',
    '$filter',
    'stones.server_error_handler',
    function ($compile, $parse, $location, $http, $routeParams, $timeout,
        $filter, server_error_handler) {
      var tpl = '<div class="entities-container-filters" ng-class="$filters_container_classes" ng-show="$filtered"><h1>{{$_("Filters")}}</h1><div class="entities-container-filter" style="margin-bottom:10px;" ng-class="$filter_container_classes" ng-repeat="$filter in $filters"><label><i class="icon-minus-sign pull-right" ng-show="$filter.remove" ng-click="$remove_filter($filter)"></i>{{$filter.label}}</label><div st-filter></div></div></div><div class="entities-container-title" ng-class="$title_container_classes"><h1>{{$title}} <i ng-show="$actions.add" style="cursor:pointer;" title="{{$_(\'Add entity\')}}" class="icon-plus-sign pull-right" ng-click="$update_route_params(\'new\')"></i> <span class="pull-right clearfix title_addon_container" ng-bind-html-unsafe="$title_addon($entities)"></span></h1></div><div class="entities-table-container" ng-class="$table_container_classes"><table class="table table-bordered table-striped table-hover" ng-class="$table_classes"><thead><th></th><th ng-repeat="h in $table_headers">{{$_(h.label)}}</th><th></th></thead><tbody><tr ng-repeat="$entity in $entities_filtered"><td style="text-align:center;" ng-bind-html-unsafe="$entity_info($entity)"></td><td ng-repeat="h in $table_headers" ng-bind-html-unsafe="$get_value($entity, h.attr)"></td><td style="text-align:center;"><span ng-bind-html-unsafe="$entity_addon($entity)"></span> <i ng-show="$actions.edit" style="cursor:pointer;" title="{{$_(\'Edit entity\')}}" class="icon-pencil" ng-click="$update_route_params($entity.$$key$$)"></i> <i ng-show="$actions.erase" style="cursor:pointer;" title="{{$_(\'Erase entity\')}}" class="icon-trash" ng-click="$show_erase_confirmation($entity)"></i></td></tr><tr ng-show="!$entities_loaded"><td colspan="{{$table_headers.length + 2}}"><i class="icon-spin icon-spinner"></i> {{$_("Loading...")}}</td></tr><tr ng-show="$entities_loaded && $entities_filtered.length == 0"><td colspan="{{$table_headers.length + 2}}">{{$_("Nothing to show.")}}</td></tr></tbody></table></div>',
        modal_tpl = '<div class="modal hide fade" id="delete-modal"><div class="modal-header"><h3>{{$_("Erase one entity")}}</h3></div><div class="modal-body"><p>{{$_("You are going to erase this entity. Are you sure?")}}</p></div><div class="modal-footer"><button class="btn btn-danger" ng-click="$erase()">{{$_("Yes, i\'m sure.")}}</button><button class="btn btn-success" ng-click="$hide_erase_confirmation()">{{$_("No. Get me out of here.")}}</button></div></div>',
        st_entities_table_ctrl;
      st_entities_table_ctrl = ['$scope', '$element', '$attrs',
        function (scope, elm, attrs) {
          scope.$entities = [];
          scope.$entities_filtered = [];
          scope.$filters = scope.filters;
          scope.$search_obj = {};
          scope.$filtered = scope.filters && (scope.filters.length > 0);
          scope.$watch(function () {
            scope.$entities_filtered = $filter('stFilter')(scope.$entities,
              scope.$filters, scope.$search_obj);
          });
          scope.$remove_filter = function (filter) {
            delete scope.$search_obj[filter.search_obj_attr];
          };
          scope.$entity_addon = scope.entity_addon;
          scope.$entity_info = scope.entity_info;
          scope.$title_addon = scope.title_addon;
          scope.$table_container_classes = attrs.tableContainerClasses;
          scope.$table_classes = attrs.tableClasses;
          scope.$title_container_classes = attrs.titleContainerClasses;
          scope.$filters_container_classes = attrs.filtersContainerClasses;
          scope.$filter_container_classes = attrs.filterContainerClasses;
          scope.$table_headers = scope.table_headers || [];
          scope.$remote_url = scope.remote_url;
          if (scope.$remote_url === undefined) {
            throw 'EntitiesTableError: No remote url defined.';
          }
          scope.$local_url = scope.local_url || '';
          scope.$title = attrs.title && attrs.title.capitalize();
          scope.$actions = {
            add: attrs.actions && attrs.actions.toLowerCase().has('c'),
            edit: attrs.actions && attrs.actions.toLowerCase().has('u'),
            erase: attrs.actions && attrs.actions.toLowerCase().has('d')
          };
          scope.$entities_loaded = false;
          scope.$update_route_params = function (sufix) {
            var current = $location.path();
            $location.path(current + sufix + '/');
          };
          scope.$get_value = function ($entity, attr) {
            var rv,
              label_tpl = '<span class="label label-info">{1}</span>';
            if (angular.isFunction(attr)) {
              rv = attr($entity);
            } else {
              rv = $parse(attr)($entity);
            }
            if (Object.isArray(rv)) {
              rv = rv.map(function (n) {
                return label_tpl.assign(n);
              }).join(' ');
            }
            return rv;
          };
          scope.$show_erase_confirmation = function (entity) {
            scope.$active_entity = entity;
            $('#delete-modal').modal('show');
          };
          scope.$hide_erase_confirmation = function () {
            scope.$active_entity = null;
            $('#delete-modal').modal('hide');
          };
          scope.$erase = function () {
            $http({
              url: scope.$remote_url + scope.$active_entity.$$key$$,
              method: 'DELETE'
            }).then(function (data) {
              scope.$entities.remove(scope.$active_entity);
              scope.$active_entity = null;
              $('#delete-modal').modal('hide');
            }, function (data) {
              server_error_handler(data);
            })
          };
          // get entities
          scope.$aditional_params = scope.aditional_params;
          scope.$cache = scope.cache;
          scope.$load_entities = function () {
            var http_opts = {
              url: scope.$remote_url,
              method: 'GET',
              params: $routeParams
            };
            if (scope.$cache) {
              var cache_name = http_opts.url;
              if (Object.size($routeParams) > 0) {
                cache_name += '?' + $.param($routeParams);
              }
              scope.$cache.put(cache_name, '');
              scope.$cache.remove(cache_name);
              http_opts.cache = scope.$cache;
            }
            if (scope.$aditional_params) {
              angular.extend(http_opts.params, scope.$aditional_params);
            }
            $http(http_opts).then(function (data) {
              scope.$entities = data.data;
              scope.$entities_loaded = true;
            }, function (data) {
              server_error_handler(data);
              scope.$entities_loaded = true;
            });
          };
        }];

      return {
        restrict: 'EA',
        scope: true,
        controller: st_entities_table_ctrl,
        link: function (scope, elm, attrs, ctrl) {
          elm.removeAttr('title');
          elm.replaceWith($compile(tpl)(scope));

          var modal = $compile(modal_tpl)(scope);
          angular.element('body').append(modal);
          scope.$on('$destroy', function () {
            modal.remove();
          });
          $('#delete-modal').modal({show: false});

          $timeout(scope.$load_entities, 2000);
        }
      };
    }]);
  stones.directive('required', [
    'stones.translator',
    '$compile',
    function (_, $compile) {
      return {
        require: '?ngModel',
        restrict: 'A',
        link: function (scope, elm, attrs, ctrl) {
          if (!ctrl) { return; }
          var error_tpl = '<div class="error">{1}</div>',
            error_elm = $compile(
              error_tpl.assign(_('This field is mandatory.'))
            )(scope);
          $(elm).after(error_elm);
          scope.$watch(attrs.ngModel, function (value) {
            if (!value && ctrl.$dirty) {
              error_elm.css('display', 'block');
            } else {
              error_elm.css('display', 'none');
            }
          });
        }
      };
    }]);

  stones.directive('stPlaceholder', [
    '$compile',
    function ($compile) {
      return {
        require: '?ngModel',
        restrict: 'A',
        priority: 99,
        link: function (scope, elm, attrs, ctrl) {
          if (!ctrl) { return; }
          scope.$placeholder = '';
          var placeholder_tpl = '<span class="control-placeholder">{{$placeholder}}</span>',
            placeholder_elm = $compile(placeholder_tpl)(scope);
          $(elm).before(placeholder_elm).removeAttr('placeholder');
          placeholder_elm.css('position', 'absolute');
          placeholder_elm.bind('click', function (e) {
            $(elm).focus();
          });
          attrs.$observe('stPlaceholder', function (value) {
            scope.$placeholder = value;
          });
          scope.$watch(attrs.ngModel, function (value) {
            if (value === undefined || value === null || value === '') {
              placeholder_elm.css('display', 'inline-block');
            } else {
              placeholder_elm.css('display', 'none');
            }
          });
        }
      };
    }]);

  stones.directive('stDatePicker', [
    function () {
      return {
        require: '?ngModel',
        link: function (scope, elm, attrs, ctrl) {
          if (!ctrl) { return; }
          $(elm).datepicker();
        }
      }
    }]);

  stones.constant('stones.locales', {
    es: {
      'This field is mandatory.': 'Este campo es obligatorio.',
      'Nothing to show.': 'Nada que mostrar.',
      'Loading...': 'Cargando...',
      'Add entity': 'Agregar entidad',
      'Edit entity': 'Editar entidad',
      'Erase one entity': 'Borrar una entidad',
      'You are going to erase this entity. Are you sure?': 'Est√°s a punto de borra esta entidad. ¬øEst√°s seguro/a?',
      'Yes, i\'m sure.': 'S√≠, lo estoy.',
      'No. Get me out of here.': 'No. S√°came de aqu√≠.',
      'Filters': 'Filtros'
    }
  });

  stones.factory('stones.translator_opts', [
    '$window',
    'stones.locales',
    function ($window, default_locales) {
      var lang = $window.navigator.language ||
          $window.navigator.userLanguage || $window.navigator.systemLanguage,
        locales = default_locales;
      lang = lang.to(2);
      $('body').append(
        '<script src="/static/j/locales/{1}.js"><\/script>'.assign(lang)
      );
      if ($window.Date.getLocale(lang)) {
        $window.Date.setLocale(lang);
      }
      return {
        set_locale: function (lang_) {
          lang = lang_;
        },
        get_locale: function () {
          return lang;
        },
        add_locale_table: function (lang_, hash) {
          locales[lang_] = hash;
        },
        translate: function (str) {
          var locale = locales[lang],
            rv;
          if (locale === undefined) { return str; }
          rv = locale[str];
          if (rv === undefined) { return str; }
          return rv;
        }
      };
    }]);
  stones.factory('stones.translator', [
    'stones.translator_opts',
    function (translator) {
      return translator.translate;
    }]);

  stones.filter('stFilter', [
    function () {
      return function (input, filters, search_obj) {
        filters = filters || [];
        if (!angular.isArray(filters)) {
          throw 'StonesFilterError: filters should be an array.';
        }
        filters.each(function (filter) {
          var value = search_obj[filter.search_obj_attr],
            entity_value;
          if (value !== undefined) {
            input = input.filter(function (entity) {
              if (angular.isFunction(filter.filter)) {
                return filter.filter(entity, value);
              } else if (angular.isString(filter.filter)) {
                entity_value = filter.filter.namespace(entity) || '';
                if (entity_value.toLowerCase === undefined) {
                  throw 'StonesFilterError: You cannot perform default filter behavior over entity attributes but strings. Found {1}. You need to define a custom behavior in the filter definition.'.assign(typeof entity_value);
                }
                if (value.toLowerCase === undefined) {
                  throw 'StonesFilterError: You cannot perform default filter behavior over search arguments but strings. Found {1}. You need to define a custom behavior in the filter definition.'.assign(typeof entity_value);
                }
                return entity_value.toLowerCase().has(value.toLowerCase());
              }
            });
          }
        });
        return input;
      }
    }]);

  stones.filter('stTrueFalse', [
    '$sce',
    function ($sce) {
      return function (input) {
        var tpl = '<i class="fa fa-{1}" style="color:{2}"></i> ';
        if (input) {
          return $sce.trustAsHtml(tpl.assign('check-circle', 'green'));
        } else {
          return $sce.trustAsHtml(tpl.assign('times-circle', 'red'));
        }
      };
    }]);

  /*
   * Adds a tooltip for title attr.
   * Tooltip is provided by bootstrap.
   */
  stones.directive('stTitle', [
    function(){
      return {
        restrict: 'A',
        link: function(scope, _elm, attrs) {
          var elm = $(_elm);
          elm.attr('title', attrs.stTitle);
          elm.tooltip();
        }
      };
    }]);
}(window.jQuery, window.angular, window.stones));

(function ($, angular, stones){
  'use strict';

  stones.auth = angular.module('stones.auth', [
    'ngSanitize',
    'ngRoute',
    'stones',
    'stones.users',
  ]);

  stones.users = angular.module('stones.users', [
    'ngSanitize',
    'ngRoute',
    'stones'
  ]);

  /*
   * Filter to render user types.
   */
  stones.users.filter('userType', [
    'stones.users.GetUserTypes',
    '$sce',
    function (get_user_types, $sce) {
      var user_types = null;
      get_user_types().then(function (types) {
        user_types = types;
      });
      return function (types, text) {
        if (!user_types) { text = true; }
        var rv = '',
          tpl = '<span class="label label-info">{1}</span> ';
        if (text) {
          tpl = '{1} ';
        }
        types.each(function (type) {
          var user_type;
          if (user_types) {
            user_type = user_types.find(function (_type) {
              return _type.value === type;
            });
          } else {
            user_type = type;
          }
          if (user_type) {
            rv += tpl.assign(user_type.label);
          }
        });
        return $sce.trustAsHtml(rv);
      }
    }]);

  /*
   * Get user types.
   */
  stones.users.provider('stones.users.GetUserTypes',
    function stonesUsersGetUserTypesProvider() {
      var url = '/users/types/';
      this.setUrl = function(_url) {
        url = _url;
      };
      this.$get = ['stones.get_entities',
        function (get_entities) {
          return get_entities(url, true);
        }];
    });

  /*
   * Filter to render user auth providers.
   */
  stones.users.filter('userProvider', [
    'stones.users.GetUserAuthProviders',
    function (get_user_auth_providers) {
      var user_providers = null;
      get_user_auth_providers().then(function (providers) {
        user_providers = providers;
      });
      return function(provider) {
        var rv = '',
          user_provider = null;
        if (!user_providers) { return; }
        user_provider = user_providers.find(function (_provider) {
          return _provider.value == provider;
        });
        if (user_provider) {
          rv = user_provider.label;
        }
        return rv;
      };
    }]);

  /*
   * Get user auth providers.
   */
  stones.users.provider('stones.users.GetUserAuthProviders',
    function stonesUsersGetUserAuthProvidersProvider() {
      var url = '/users/auth_providers/';
      this.setUrl = function (_url) {
        url = url;
      };
      this.$get = ['stones.get_entities',
        function (get_entities) {
          return get_entities(url, true);
        }];
    });

  /*
   * Get users list.
   */
  stones.users.provider('stones.users.GetUsers',
    function stonesUsersGetUsesProvider() {
      var url = '/users/';
      this.setUrl = function (_url) {
        url = url;
      };
      this.$get = ['stones.get_entities',
        function (get_entities) {
          return get_entities(url);
        }];
    });

  /*
   * Get one user.
   */
  stones.users.provider('stones.users.GetUser',
    function stonesUsersGetUserProvider() {
      var url = '/users/';
      this.setUrl = function (_url) {
        url = url;
      };
      this.$get = ['stones.get_entity',
        function (get_entity) {
          return get_entity(url);
        }];
    });

  /*
   * Delete one user.
   */
  stones.users.provider('stones.users.DeleteUser',
    function stonesUsersDeleteUserProvider() {
      var url = '/users/';
      this.setUrl = function (_url) {
        url = url;
      };
      this.$get = ['stones.delete_entity',
        function (delete_entity) {
          return delete_entity(url);
        }];
    });

  /*
   * Save one user.
   */
  stones.users.provider('stones.users.SaveUser',
    function stonesUsersSaveUserProvider() {
      var url = '/users/';
      this.setUrl = function (_url) {
        url = url;
      };
      this.$get = ['stones.save_entity',
        function (save_entity) {
          return save_entity(url);
        }];
    });

  /*
   * Controller to manage user list.
   */
  stones.users.controller('stones.users.listCtrl', [
    '$scope',
    'stones.users.GetUsers',
    'stones.users.DeleteUser',
    function (scope, get_users, delete_user) {
      scope.users = [];
      get_users().then(function (users) {
        scope.users = users;
      });
    }]);

  stones.users.directive('stUserType', [
    function () {
      var updater = function (scope, elm) {
        if (!scope.user.type) { return; }
        if (scope.user.type.find(function (_type) {
          return scope.type.value === _type;
        })) {
          elm.attr('checked', 'checked');
        } else {
          elm.removeAttr('checked');
        }
      };
      return {
        restrict: 'A',
        link: function(scope, elm, attrs) {
          if (elm[0].tagName !== 'INPUT') { return; }
          scope.$watch('user_types', function () {
            updater(scope, elm);
          });
          scope.$watch('user.type', function () {
            updater(scope, elm);
          });
          elm.bind('change', function (e) {
            var is = e.target.checked,
              type = scope.type;
            if (is) {
              if (!scope.user.type.find(function (_type) {
                return _type === type.value;
              })) {
                scope.user.type.add(type.value);
              }
            } else {
              if (scope.user.type.find(function (_type) {
                return _type === type.value;
              })) {
                scope.user.type.remove(type.value);
              }
            }
          });
        }
      };
  }]);

  /*
   * Controller to manage user form.
   */
  stones.users.controller('stones.users.formCtrl', [
    '$scope',
    '$routeParams',
    'stones.users.GetUserTypes',
    'stones.users.GetUser',
    'stones.users.SaveUser',
    function (scope, $routeParams, get_user_types, get_user, save_user) {
      scope.user = {};
      scope.user_types = [];
      get_user_types().then(function(types) {
        scope.user_types = types;
      });
      if ($routeParams.key !== 'new') {
        get_user($routeParams.key).then(function (user) {
          scope.user = user;
        });
      }

      scope.save = function () {
        save_user(scope.user).then(function () {
          scope.go_back();
        });
      };
    }]);

}(window.jQuery, window.angular, window.stones));
